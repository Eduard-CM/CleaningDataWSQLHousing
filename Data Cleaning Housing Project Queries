-- Cleaning data in SQL Queries

select *
from ProjectHousing2.dbo.NashvilleHousing

------------------------------------------------------------------------

-- Standardize Date Format

SELECT SaleDate, 
       CASE WHEN ISDATE(CONVERT(nvarchar(max), SaleDate)) = 1 
            THEN CONVERT(date, CONVERT(nvarchar(max), SaleDate)) 
       END AS ConvertedSaleDate
FROM ProjectHousing2.dbo.NashvilleHousing;

-------------------------------------------------------------------------

-- Populate Property Adress data

select PropertyAddress
from ProjectHousing2.dbo.NashvilleHousing
where PropertyAddress is null


SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM ProjectHousing2.dbo.NashvilleHousing a
JOIN ProjectHousing2.dbo.NashvilleHousing b
    ON a.ParcelID = b.ParcelID
    AND CAST(a.UniqueID AS nvarchar(max)) <> CAST(b.UniqueID AS nvarchar(max))
Where a.PropertyAddress is NULL    

Update a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM ProjectHousing2.dbo.NashvilleHousing a
JOIN ProjectHousing2.dbo.NashvilleHousing b
    ON a.ParcelID = b.ParcelID
    AND CAST(a.UniqueID AS nvarchar(max)) <> CAST(b.UniqueID AS nvarchar(max))
Where a.PropertyAddress is NULL   

----------------------------------------------------------------------------------------------

-- Breaking out Property Address Into Individual Colums 

select PropertyAddress
from ProjectHousing2.dbo.NashvilleHousing

SELECT
    CASE
        WHEN CHARINDEX(',', PropertyAddress) > 0
        THEN SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1)
        ELSE PropertyAddress
    END AS Address
FROM ProjectHousing2.dbo.NashvilleHousing;


SELECT
    SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress + ',') - 1) AS Address1,
    SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress) - CHARINDEX(',', PropertyAddress)) AS Address2
FROM ProjectHousing2.dbo.NashvilleHousing;

ALTER TABLE NashvilleHousing
ADD PropertySplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress + ',') - 1)

ALTER TABLE NashvilleHousing
ADD PropertySplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitCity =  SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress) - CHARINDEX(',', PropertyAddress))

select *
FROM ProjectHousing2.dbo.NashvilleHousing


-------------------------------------------------------------------------------

-- Breaking out Owner Address Into Individual Colums without STRING

select OwnerAddress
from ProjectHousing2.dbo.NashvilleHousing

SELECT
PARSENAME(REPLACE(OwnerAddress,',', '.'), 3),
PARSENAME(REPLACE(OwnerAddress,',', '.'), 2),
PARSENAME(REPLACE(OwnerAddress,',', '.'), 1)
from ProjectHousing2.dbo.NashvilleHousing

ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress,',', '.'), 3)

ALTER TABLE NashvilleHousing
ADD OwnerSplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitCity =  PARSENAME(REPLACE(OwnerAddress,',', '.'), 2)

ALTER TABLE NashvilleHousing
ADD OwnerSplitState NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress,',', '.'), 1)

select *
FROM ProjectHousing2.dbo.NashvilleHousing


------------------------------------------------------------------------

-- Change Y & N to "Yes" and "No" in "Sold As Vacant" field

SELECT CONVERT(varchar(max), SoldAsVacant) AS SoldAsVacant, COUNT(*) AS Count
FROM ProjectHousing2.dbo.NashvilleHousing
WHERE CONVERT(varchar(max), SoldAsVacant) IN ('Y', 'N', 'Yes', 'No')
GROUP BY CONVERT(varchar(max), SoldAsVacant)
ORDER BY Count;

SELECT
    SoldAsVacant,
    CASE
        WHEN CONVERT(varchar(max), SoldAsVacant) = 'y' THEN 'Yes'
        WHEN CONVERT(varchar(max), SoldAsVacant) = 'n' THEN 'No'
        ELSE CONVERT(varchar(max), SoldAsVacant)
    END 
FROM ProjectHousing2.dbo.NashvilleHousing;

UPDATE NashvilleHousing
SET SoldAsVacant = CASE
        WHEN CONVERT(varchar(max), SoldAsVacant) = 'y' THEN 'Yes'
        WHEN CONVERT(varchar(max), SoldAsVacant) = 'n' THEN 'No'
        ELSE CONVERT(varchar(max), SoldAsVacant)
    END ;

--------------------------------------------------------------------------

-- Remove duplicates ( Please refrain from deleting any data from the database without first consulting a Senior, Lead, Manager, or appropriate authority. The information provided here is solely for the purpose of understanding how to perform deletions in case it is requested. )


WITH RowNumCTE AS (
SELECT *, 
      ROW_NUMBER() OVER (
      PARTITION BY 
      CONVERT(varchar(max), ParcelID),
               
                    CONVERT(varchar(max), PropertyAddress),
                    CONVERT(varchar(max), SalePrice),
                  CONVERT(varchar(max), SaleDate),
                     CONVERT(varchar(max), LegalReference)
                  ORDER BY
                   CONVERT(varchar(max), UniqueID)
                   ) row_num
FROM ProjectHousing2.dbo.NashvilleHousing 
WHERE ISNUMERIC(CONVERT(varchar(max), UniqueID)) = 1 )
-- ORDER BY CONVERT(varchar(max), ParcelID)

SELECT *
FROM RowNumCTE
WHERE row_num > 1
ORDER BY PropertyAddress

DELETE
FROM RowNumCTE
WHERE row_num > 1
-- ORDER BY PropertyAddress

-------------------------------------------------------------------------

-- Delete Unused Colums ( Please refrain from deleting any data from the database without first consulting a Senior, Lead, Manager, or appropriate authority. The information provided here is solely for the purpose of understanding how to perform deletions in case it is requested. )

select *
FROM ProjectHousing2.dbo.NashvilleHousing

ALTER TABLE ProjectHousing2.dbo.NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress

ALTER TABLE ProjectHousing2.dbo.NashvilleHousing
DROP COLUMN SaleDate


-----------------------------------------------------------------------------

